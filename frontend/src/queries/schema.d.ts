/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Root */
    get: operations['root__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/patients/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search Patients
     * @description Search for patients by name and birth date using fuzzy matching.
     */
    get: operations['search_patients_patients__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/patients/{patient_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Patient Details
     * @description Get a patient's details including encounters and medication requests.
     */
    get: operations['get_patient_details_patients__patient_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/encounters/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Encounters
     * @description Get all encounters.
     */
    get: operations['list_encounters_encounters__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** Encounter */
    Encounter: {
      /** Resourcetype */
      resourceType: string;
      /** Id */
      id: string;
      /** Status */
      status: string;
      /** Subject */
      subject: {
        [key: string]: unknown;
      };
      /** Description */
      description: string;
    };
    /** EncounterResponse */
    EncounterResponse: {
      /** Encounters */
      encounters: components['schemas']['Encounter'][];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** MedicationRequest */
    MedicationRequest: {
      /** Resourcetype */
      resourceType: string;
      /** Id */
      id: string;
      /** Encounter */
      encounter: {
        [key: string]: unknown;
      };
      /** Dosageinstruction */
      dosageInstruction: {
        [key: string]: unknown;
      }[];
    };
    /** Patient */
    Patient: {
      /** Resourcetype */
      resourceType: string;
      /** Id */
      id: string;
      /** Name */
      name: {
        [key: string]: unknown;
      }[];
      /** Birthdate */
      birthDate: string;
    };
    /** PatientDetailsResponse */
    PatientDetailsResponse: {
      patient: components['schemas']['Patient'];
      /** Encounters */
      encounters: components['schemas']['Encounter'][];
      /** Medicationrequests */
      medicationRequests: components['schemas']['MedicationRequest'][];
    };
    /** PatientResponse */
    PatientResponse: {
      /** Patients */
      patients: components['schemas']['Patient'][];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  search_patients_patients__get: {
    parameters: {
      query?: {
        /** @description Patient name (full or partial) */
        name?: string;
        /** @description Patient birth date (YYYY-MM-DD) */
        birthDate?: string;
        /** @description Minimum similarity threshold for name matching */
        threshold?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PatientResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_patient_details_patients__patient_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        patient_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PatientDetailsResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_encounters_encounters__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['EncounterResponse'];
        };
      };
    };
  };
}
